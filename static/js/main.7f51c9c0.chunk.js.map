{"version":3,"sources":["components/Character.js","components/Episode.js","components/Pagination.js","components/Episodes.js","App.js","index.js"],"names":["Character","match","useState","characterInfo","setCharacterInfo","isCharLoading","setIsCharLoading","characterId","params","id","useEffect","a","fetch","charResponse","json","charData","fetchChar","className","name","src","image","alt","type","species","status","origin","location","episode","length","Episode","setEpisode","isEpisodeLoading","setIsEpisodeLoading","episodeCharacters","setEpisodeCharacters","episodeName","episodeDate","air_date","episodeNum","episodeCharList","map","char","to","episodeId","episodeResponse","episodeData","fetchCharacters","fetchEpisode","url","res","data","promises","i","characters","push","result","Promise","all","then","results","forEach","elem","Pagination","totalNumOfEpisodes","episodesPerPage","changePage","setCurrentPage","pageNumbers","Math","ceil","pageNumberList","number","onClick","prevVal","totalPageNumber","Episodes","props","loading","episodes","currentPageEpisodes","episodeList","App","setEpisodes","setLoading","currentPage","currentPageLastIndex","currentPageFirstIndex","currentEpisodes","slice","apiPageNumber","fetchSingleEpisodePage","apiEpisodesPageNum","episodesData","promisesArr","dataArr","subElem","fetchData","exact","path","pageNum","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f51c9c0.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles/Character.css\";\n\nfunction Character({ match }) {\n  const [characterInfo, setCharacterInfo] = useState({});\n  const [isCharLoading, setIsCharLoading] = useState(true);\n  const characterId = match.params.id;\n\n  useEffect(() => {\n    const fetchChar = async () => {\n      const charResponse = await fetch(\n        `https://rickandmortyapi.com/api/character/${characterId}`\n      );\n      const charData = await charResponse.json();\n      setCharacterInfo(charData);\n      setIsCharLoading(false);\n    };\n    fetchChar();\n  }, []);\n\n  return isCharLoading ? (\n    <p>Loading...</p>\n  ) : (\n    <div className=\"character-page-container\">\n      <h3 id=\"character-name\">{characterInfo.name}</h3>\n      <img id=\"character-img\" src={`${characterInfo.image}`} alt=\"character\" />\n      <p className=\"character-description\">\n        {characterInfo.name} is a fictional character in a cartoon series Rick\n        and Morty for adults\n        {characterInfo.type === \"\"\n          ? \". \"\n          : ` The type of the character is ${characterInfo.type}. `}\n        The character is a member of {characterInfo.species} species. The\n        current status of the character is {characterInfo.status}.\n        {characterInfo.origin.name === \"unknown\"\n          ? \" \"\n          : ` The character is orginally from ${characterInfo.origin.name} and is currently located on ${characterInfo.location.name}. `}\n        The character has shown in {characterInfo.episode.length} episodes in\n        the series.\n        {characterInfo.episode.length > 35\n          ? \"Character is one of two main characters of the show.\"\n          : \"\"}\n      </p>\n    </div>\n  );\n}\n\nexport default Character;\n","import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./styles/Episode.css\";\n\nfunction Episode({ match }) {\n  const [episode, setEpisode] = useState({});\n  const [isEpisodeLoading, setIsEpisodeLoading] = useState(true);\n  const [episodeCharacters, setEpisodeCharacters] = useState([]);\n  const episodeName = episode.name;\n  const episodeDate = episode.air_date;\n  const episodeNum = episode.episode;\n  const episodeCharList = episodeCharacters.map((char) => {\n    return (\n      <Link\n        className=\"character-link\"\n        key={char.id}\n        to={`/characters/${char.id}`}\n      >\n        <p className=\"episode-character-name\">{char.name}</p>\n        <img\n          className=\"episode-character-img\"\n          src={`${char.image}`}\n          alt=\"character-tumbnail\"\n        />\n      </Link>\n    );\n  });\n\n  useEffect(() => {\n    const episodeId = match.params.id;\n    const fetchEpisode = async () => {\n      const episodeResponse = await fetch(\n        `https://rickandmortyapi.com/api/episode/${episodeId}`\n      );\n      const episodeData = await episodeResponse.json();\n      setEpisode(episodeData);\n      fetchCharacters(episodeData);\n      setIsEpisodeLoading(false);\n    };\n    fetchEpisode();\n\n    const fetchCharacters = async (episodeData) => {\n      const fetchChar = async (url) => {\n        const res = await fetch(url);\n        const data = await res.json();\n        return data;\n      };\n\n      const promises = [];\n      for (let i = 0; i < episodeData.characters.length; i++) {\n        promises.push(fetchChar(episodeData.characters[i]));\n      }\n      const result = [];\n      await Promise.all(promises).then((results) =>\n        results.forEach((elem) => result.push(elem))\n      );\n\n      setEpisodeCharacters(result);\n    };\n  }, []);\n\n  return isEpisodeLoading ? (\n    <p>Loading...</p>\n  ) : (\n    <div className=\"episode-detail-container\">\n      <h2 id=\"episode-name\" className=\"episode-element\">\n        {episodeName}\n      </h2>\n      <h3 id=\"episode-date\" className=\"episode-element\">\n        {episodeDate}\n      </h3>\n      <h4 id=\"episode-number\" className=\"episode-element\">\n        {episodeNum}\n      </h4>\n      <h2 id=\"character-container-title\">Characters</h2>\n      <ul className=\"characters-container\">{episodeCharList}</ul>\n    </div>\n  );\n}\n\nexport default Episode;\n","import React from \"react\";\nimport \"./styles/Pagination.css\";\n\nfunction Pagination({\n  totalNumOfEpisodes,\n  episodesPerPage,\n  changePage,\n  setCurrentPage,\n}) {\n  const pageNumbers = [];\n  const prevPage = () => {\n    setCurrentPage((prevVal) => {\n      return prevVal > 1 ? prevVal - 1 : prevVal;\n    });\n  };\n  const nextPage = () => {\n    const totalPageNumber = Math.ceil(totalNumOfEpisodes / episodesPerPage);\n    setCurrentPage((prevVal) => {\n      return prevVal < totalPageNumber ? prevVal + 1 : prevVal;\n    });\n  };\n  for (let i = 1; i <= Math.ceil(totalNumOfEpisodes / episodesPerPage); i++) {\n    pageNumbers.push(i);\n  }\n  const pageNumberList = pageNumbers.map((number) => (\n    <button\n      className=\"page-number\"\n      key={number}\n      onClick={() => changePage(number)}\n    >\n      {number}\n    </button>\n  ));\n\n  return (\n    <div className=\"pagination-container\">\n      <button className=\"navigation-button page-number\" onClick={prevPage}>\n        Prev\n      </button>\n      {pageNumberList}\n      <button className=\"navigation-button page-number\" onClick={nextPage}>\n        Next\n      </button>\n    </div>\n  );\n}\n\nexport default Pagination;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Pagination from \"./Pagination\";\nimport \"../components/styles/Episodes.css\";\n\nconst Episodes = (props) => {\n  const loading = props.loading;\n  const episodes = props.currentPageEpisodes;\n  const episodesPerPage = props.episodesPerPage;\n  const totalNumOfEpisodes = props.totalNumOfEpisodes;\n  const changePage = props.changePage;\n  const setCurrentPage = props.setCurrentPage;\n  const episodeList = episodes.map((episode) => {\n    return (\n      <Link\n        className=\"episode-list-item\"\n        key={episode.id}\n        to={`/episodes/${episode.id}`}\n      >\n        {episode.name}\n      </Link>\n    );\n  });\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n  return (\n    <div className=\"episodes-container\">\n      <h1 id=\"title\">Rick and Morty Episode Guide</h1>\n      <ul className=\"episodes-list\">{episodeList}</ul>\n      <Pagination\n        totalNumOfEpisodes={totalNumOfEpisodes}\n        changePage={changePage}\n        episodesPerPage={episodesPerPage}\n        setCurrentPage={setCurrentPage}\n      />\n    </div>\n  );\n};\n\nexport default Episodes;\n","import { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Character from \"./components/Character\";\nimport Episode from \"./components/Episode\";\nimport Episodes from \"./components/Episodes\";\n\nfunction App() {\n  const [episodes, setEpisodes] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentPage, setCurrentPage] = useState(1);\n  const episodesPerPage = 9;\n  const currentPageLastIndex = currentPage * episodesPerPage;\n  const currentPageFirstIndex = currentPageLastIndex - episodesPerPage;\n  const currentEpisodes = episodes.slice(\n    currentPageFirstIndex,\n    currentPageLastIndex\n  );\n  const changePage = (pageNum) => {\n    setCurrentPage(pageNum);\n  };\n\n  const apiMaxNumberOfEpisodesPerPage = 20;\n  const apiPageNumber = Math.ceil(\n    episodesPerPage / apiMaxNumberOfEpisodesPerPage\n  );\n  useEffect(() => {\n    const fetchData = async () => {\n      const fetchSingleEpisodePage = async (apiEpisodesPageNum) => {\n        const episodeResponse = await fetch(\n          `https://rickandmortyapi.com/api/episode?page=${apiEpisodesPageNum}`\n        );\n        const episodesData = await episodeResponse.json();\n        return episodesData;\n      };\n      const promisesArr = [];\n      for (let i = 1; i <= 3; i++) {\n        promisesArr.push(fetchSingleEpisodePage(i));\n      }\n      const dataArr = [];\n      await Promise.all(promisesArr).then((results) =>\n        results.forEach((elem) =>\n          elem.results.forEach((subElem) => dataArr.push(subElem))\n        )\n      );\n      setEpisodes(dataArr);\n      setLoading(false);\n    };\n    fetchData();\n  }, [apiPageNumber]);\n\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Episodes\n            currentPageEpisodes={currentEpisodes}\n            loading={loading}\n            episodesPerPage={episodesPerPage}\n            changePage={changePage}\n            totalNumOfEpisodes={episodes.length}\n            setCurrentPage={setCurrentPage}\n          />\n        </Route>\n        <Route path=\"/episodes/:id\" component={Episode} />\n        <Route path=\"/characters/:id\" component={Character} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./components/styles/Index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}